#+title: Implemention of  Adding phonetic translations for renarration web application
#+AUTHOR: Raj Manvar
#+DATE: [2016-06-16 Thu]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../../../org-templates/level-0.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export


* Imports

** Imports for Python API
Following imports are used for the flask app.

#+BEGIN_SRC python :tangle ../../code/app/__init__.py :eval no
# -*- coding: utf-8 -*-
from flask import Flask
from flask import request
from flask_cors import CORS

app = Flask(__name__)

CORS(app)


from app import views

#+END_SRC


* APIS

** APIs for phonetic translation

We use pickle library for fast loading of the dictionary whenever the server
starts for the first time.
We have two APIs at present translate and translate live , translate live gets
the translation from the web using [[http://www.phonemicchart.com/]] .
The translation from the web is however slow at present and is not used in the
demo, but only in the test cases.

#+BEGIN_SRC python :tangle ../../code/app/views.py :eval no
# -*- coding: utf-8 -*-
from app import app
from flask import request
import requests as req
import bs4
import pickle
from dateutil.parser import parse
from datetime import datetime

word_list = pickle.load( open( "word_list.p", "rb" ) )


@app.route("/translate", methods=['POST'])
def trans():

    sentence = request.json['sentence']
    words = sentence.split()
    answer = []
    for word in words :

        word = word.lower()
        if word in word_list:
            answer.append(word_list[word])
        else :
            answer.append(word)


    return " ".join(answer)

@app.route("/translatelive", methods=['POST'])
def translive():

    sentence = request.json['sentence']
    words = sentence.split()
    answer = []
    for word in words :

        word = word.lower()
        res = req.get('http://www.phonemicchart.com/transcribe/?w='+word)
        soup = bs4.BeautifulSoup(res.text)
        ret = soup.center
        if ret:
            answer.append(ret.string)
        else :
            answer.append(word)


    return " ".join(answer)


@app.route("/test", methods=['GET'])
def test():
    return "some test string"

#+END_SRC


* run

Running the app
** running the app

#+BEGIN_SRC python :tangle ../../code/run.py :eval no
# -*- coding: utf-8 -*-

#!flask/bin/python
from app import app


app.run(debug=True)


#+END_SRC


* setup file

the depedencies of the web application and virtual enviornment setup can be
done by the following file

#+BEGIN_SRC bash :tangle ../../code/setup.sh :eval no
# -*- coding: utf-8 -*-

#! bash script for setting up enviornment for flask app


sudo apt-get install python-virtualenv

virtualenv flask

flask/bin/pip install flask

flask/bin/pip install flask-login

flask/bin/pip install requests

flask/bin/pip install requests

flask/bin/pip install bs4

flask/bin/pip install python-dateutil

flask/bin/pip install datetime

flask/bin/pip install -U flask-cors


#+END_SRC


* Frontend changes

 +  The following function is used to make the change in the front end
   javascript files .
 +  The get_phonetic makes a HTTP request to server to get the phonetic
    translations
 +  Anno_highlight is used to replace the text with corresponding phonetic
    translations.

#+BEGIN_SRC javascript :tangle ../../code/frontend.js :eval no
function get_phonetics(str){
  
  var xhr = new XMLHttpRequest();
  xhr.open("POST", "//localhost:5000/translate", true); // enter the actual URL for web-service here
  xhr.setRequestHeader("Access-Control-Allow-Origin", "*");
  xhr.setRequestHeader("Content-Type", "application/json; charset=UTF-8");
  xhr.send(JSON.stringify({"sentence":str}));


  xhr.onreadystatechange = processRequest;

  function processRequest(e)
  {
    if (xhr.readyState == 4)
    {
      console.log('pho trans set');
      phonetic_trans = xhr.responseText;
    }
  }

}

#+END_SRC


#+BEGIN_SRC javascript :tangle ../../code/frontend.js :eval no

function anno_phonetic(xpath) {
    //if element is already translated
  if (anno_getElementByXpath(xpath).id != "phonetic" || !(anno_getElementByXpath(xpath).id)) {
    var text_to_translate = $j(anno_getElementByXpath(xpath)).html();
    get_phonetics(text_to_translate);
    var timer = window.setInterval
    (
      function ()
      {
        if(typeof phonetic_trans !== "default_value")
        {
          console.log("text changing");
          $j(anno_getElementByXpath(xpath)).text(phonetic_trans);
          phonetic_trans = "default_value";
          window.clearInterval(timer);
          $j(anno_getElementByXpath(xpath)).wrapInner("<span id='phonetic'></span>");
        }
        else
        {
          console.log("returned without change");
        }
      }
      ,1000
    );
  }
  else {
        console.log('already translated');
    }
}

#+END_SRC
